{"actions":[],"advisories":{"1090848":{"findings":[{"version":"0.0.5","paths":["open"]}],"metadata":null,"vulnerable_versions":"<6.0.0","module_name":"open","severity":"critical","github_advisory_id":"GHSA-28xh-wpgr-7fm8","cves":[],"access":"public","patched_versions":">=6.0.0","cvss":{"score":0,"vectorString":null},"updated":"2023-01-09T05:01:44.000Z","recommendation":"Upgrade to version 6.0.0 or later","cwe":["CWE-77"],"found_by":null,"deleted":null,"id":1090848,"references":"- https://github.com/pwnall/node-open/issues/68\n- https://github.com/pwnall/node-open/issues/69\n- https://hackerone.com/reports/319473\n- https://www.npmjs.com/advisories/663\n- https://github.com/advisories/GHSA-28xh-wpgr-7fm8","created":"2019-06-20T15:35:49.000Z","reported_by":null,"title":"Command Injection in open","npm_advisory_id":null,"overview":"Versions of `open` before 6.0.0 are vulnerable to command injection when unsanitized user input is passed in.\n\nThe package does come with the following warning in the readme:\n\n```\nThe same care should be taken when calling open as if you were calling child_process.exec directly. If it is an executable it will run in a new shell.\n```\n\n\n## Recommendation\n\n`open` is now the deprecated `opn` package. Upgrading to the latest version is likely have unwanted effects since it now has a very different API but will prevent this vulnerability.","url":"https://github.com/advisories/GHSA-28xh-wpgr-7fm8"},"1091792":{"findings":[{"version":"2.0.0","paths":["base64url"]}],"metadata":null,"vulnerable_versions":"<3.0.0","module_name":"base64url","severity":"moderate","github_advisory_id":"GHSA-rvg8-pwq2-xj7q","cves":[],"access":"public","patched_versions":">=3.0.0","cvss":{"score":0,"vectorString":null},"updated":"2023-04-21T19:31:19.000Z","recommendation":"Upgrade to version 3.0.0 or later","cwe":["CWE-125"],"found_by":null,"deleted":null,"id":1091792,"references":"- https://hackerone.com/reports/321687\n- https://github.com/brianloveswords/base64url/pull/25\n- https://github.com/brianloveswords/base64url/commit/4fbd954a0a69e9d898de2146557cc6e893e79542\n- https://github.com/advisories/GHSA-rvg8-pwq2-xj7q","created":"2020-09-01T20:42:44.000Z","reported_by":null,"title":"Out-of-bounds Read in base64url","npm_advisory_id":null,"overview":"Versions of `base64url` before 3.0.0 are vulnerable to to out-of-bounds reads as it allocates uninitialized Buffers when number is passed in input on Node.js 4.x and below.\n\n\n## Recommendation\n\nUpdate to version 3.0.0 or later.","url":"https://github.com/advisories/GHSA-rvg8-pwq2-xj7q"},"1096475":{"findings":[{"version":"6.10.2","paths":["qs"]}],"metadata":null,"vulnerable_versions":">=6.10.0 <6.10.3","module_name":"qs","severity":"high","github_advisory_id":"GHSA-hrpp-h998-j3pp","cves":["CVE-2022-24999"],"access":"public","patched_versions":">=6.10.3","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2024-02-13T20:35:50.000Z","recommendation":"Upgrade to version 6.10.3 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1096475,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2022-24999\n- https://github.com/ljharb/qs/pull/428\n- https://github.com/n8tz/CVE-2022-24999\n- https://github.com/ljharb/qs/commit/4310742efbd8c03f6495f07906b45213da0a32ec\n- https://github.com/ljharb/qs/commit/727ef5d34605108acb3513f72d5435972ed15b68\n- https://github.com/ljharb/qs/commit/73205259936317b40f447c5cdb71c5b341848e1b\n- https://github.com/ljharb/qs/commit/8b4cc14cda94a5c89341b77e5fe435ec6c41be2d\n- https://github.com/ljharb/qs/commit/ba24e74dd17931f825adb52f5633e48293b584e1\n- https://github.com/ljharb/qs/commit/e799ba57e573a30c14b67c1889c7c04d508b9105\n- https://github.com/ljharb/qs/commit/ed0f5dcbef4b168a8ae299d78b1e4a2e9b1baf1f\n- https://github.com/ljharb/qs/commit/f945393cfe442fe8c6e62b4156fd35452c0686ee\n- https://github.com/ljharb/qs/commit/fc3682776670524a42e19709ec4a8138d0d7afda\n- https://github.com/expressjs/express/releases/tag/4.17.3\n- https://lists.debian.org/debian-lts-announce/2023/01/msg00039.html\n- https://github.com/advisories/GHSA-hrpp-h998-j3pp","created":"2022-11-27T00:30:50.000Z","reported_by":null,"title":"qs vulnerable to Prototype Pollution","npm_advisory_id":null,"overview":"qs before 6.10.3 allows attackers to cause a Node process hang because an `__ proto__` key can be used. In many typical web framework use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4.","url":"https://github.com/advisories/GHSA-hrpp-h998-j3pp"}},"muted":[],"metadata":{"vulnerabilities":{"info":0,"low":0,"moderate":1,"high":1,"critical":1},"dependencies":10,"devDependencies":1,"optionalDependencies":0,"totalDependencies":11}}
